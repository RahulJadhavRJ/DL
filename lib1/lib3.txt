#include <iostream>
#include <vector>
#include <omp.h>
//g++ -fopenmp lib3.cpp   ///a.exe

using namespace std;
int main() {
    int n=0;
    cout<<"Enter the size of array"<<endl;
    cin>>n;
    vector<int> arr(n);
    cout<<"Enter the array values"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int num_threads = omp_get_max_threads();

    // Initialize reduction variables
    int min_val = arr[0];
    int max_val = arr[0];
    int sum_val = 0;

    // Parallel reduction
    #pragma omp parallel for reduction(min:min_val) reduction(max:max_val) reduction(+:sum_val) num_threads(num_threads)
    for (int i = 0; i < n; i++) {
        // Update minimum value
        if (arr[i] < min_val) {
            min_val = arr[i];
        }

        // Update maximum value
        if (arr[i] > max_val) {
            max_val = arr[i];
        }

        // Accumulate sum
        sum_val += arr[i];
    }

    // Calculate average
    double avg_val = static_cast<double>(sum_val) / n;

    // Output results
    cout << "Min: " << min_val << endl;
    cout << "Max: " << max_val << endl;
    cout << "Sum: " << sum_val << endl;
    cout << "Average: " << avg_val << endl;

    return 0;
}
