#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

// Graph representation using an adjacency list
class Graph {
    int numVertices;
    vector<vector<int>> adjList;

public:
    Graph(int vertices) : numVertices(vertices), adjList(vertices) {}

    void addEdge(int u, int v) {
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }

    void parallelBFS(int startVertex) {
        vector<bool> visited(numVertices, false);
        queue<int> q;

        visited[startVertex] = true;
        q.push(startVertex);

        while (!q.empty()) {
            int currVertex = q.front();
            q.pop();
            cout << currVertex << " ";

            #pragma omp parallel for
            for (int i = 0; i < adjList[currVertex].size(); i++) {
                int neighbor = adjList[currVertex][i];
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
    }

    void parallelDFS(int startVertex) {
        vector<bool> visited(numVertices, false);
        parallelDFSUtil(startVertex, visited);
    }

    void parallelDFSUtil(int currVertex, vector<bool>& visited) {
        visited[currVertex] = true;
        cout << currVertex << " ";

        #pragma omp parallel for
        for (int i = 0; i < adjList[currVertex].size(); i++) {
            int neighbor = adjList[currVertex][i];
            if (!visited[neighbor]) {
                parallelDFSUtil(neighbor, visited);
            }
        }
    }
};

int main() {
    int numVertices = 7;
    Graph graph(numVertices);

    // Adding edges to the graph
    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 3);
    graph.addEdge(1, 4);
    graph.addEdge(2, 5);
    graph.addEdge(2, 6);

    cout << "Parallel BFS traversal: ";
    graph.parallelBFS(0);
    cout << endl;

    cout << "Parallel DFS traversal: ";
    graph.parallelDFS(0);
    cout << endl;

    return 0;
}
