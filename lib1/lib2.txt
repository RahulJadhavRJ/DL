#include <iostream>
#include <omp.h>
using namespace std;


void bubblesort(int arr[],int n){

    bool swapped;
    int startt=0;
    int endt=0;
    #pragma omp parallel 
    startt=omp_get_wtime();
    for(int i=0;i<n;i++){
        swapped=false;
        for(int j=0;j<n-i-1;j++){
            if(arr[j]>arr[j+1]){
                swap(arr[j],arr[j+1]);
                swapped=true;
            }
        }
        if(swapped==false){
            break;
        }
    }
    endt=omp_get_wtime();
    cout<<"Total time required to run :"<<(endt-startt)<<endl;
}

void printarr(int arr[],int n){
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
}
int main(){
    int n;
    cout<<"Enter size of array"<<endl;
    cin>>n;
    int arr[n];
    cout<<"Enter the array elements :"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    bubblesort(arr,n);
    cout<<"Sorted array :"<<endl;
    printarr(arr,n);
return 0;
}




...........................................................
#include <iostream>
#include <omp.h>
//g++ -fopenmp merge.cpp 
using namespace std;
void merge(int arr[], int left, int mid, int right) {
    int i = left;
    int j = mid + 1;
    int temp[right - left + 1];
    int k = 0;

    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k] = arr[i];
            i++;
        } else {
            temp[k] = arr[j];
            j++;
        }
        k++;
    }

    while (i <= mid) {
        temp[k] = arr[i];
        i++;
        k++;
    }

    while (j <= right) {
        temp[k] = arr[j];
        j++;
        k++;
    }

    for (int idx = 0; idx < k; idx++) {
        arr[left + idx] = temp[idx];
    }
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        #pragma omp parallel sections
        {
            #pragma omp section
            mergeSort(arr, left, mid);

            #pragma omp section
            mergeSort(arr, mid + 1, right);
        }

        merge(arr, left, mid, right);
    }
}

int main() {
    int arr[] = {21, 21, 43, 5, 26, 7};
    int size = sizeof(arr) / sizeof(arr[0]);

    #pragma omp parallel
    {
        #pragma omp single nowait
        mergeSort(arr, 0, size - 1);
    }

    cout << "Sorted array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
